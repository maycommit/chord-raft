// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chord.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ID struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ID) Reset()         { *m = ID{} }
func (m *ID) String() string { return proto.CompactTextString(m) }
func (*ID) ProtoMessage()    {}
func (*ID) Descriptor() ([]byte, []int) {
	return fileDescriptor_541dae51990542ec, []int{0}
}

func (m *ID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ID.Unmarshal(m, b)
}
func (m *ID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ID.Marshal(b, m, deterministic)
}
func (m *ID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ID.Merge(m, src)
}
func (m *ID) XXX_Size() int {
	return xxx_messageInfo_ID.Size(m)
}
func (m *ID) XXX_DiscardUnknown() {
	xxx_messageInfo_ID.DiscardUnknown(m)
}

var xxx_messageInfo_ID proto.InternalMessageInfo

func (m *ID) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Node struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Address              string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_541dae51990542ec, []int{1}
}

func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Node) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type MultipleNodes struct {
	ChordNode            *Node    `protobuf:"bytes,1,opt,name=chordNode,proto3" json:"chordNode,omitempty"`
	RaftNode             *Node    `protobuf:"bytes,2,opt,name=raftNode,proto3" json:"raftNode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MultipleNodes) Reset()         { *m = MultipleNodes{} }
func (m *MultipleNodes) String() string { return proto.CompactTextString(m) }
func (*MultipleNodes) ProtoMessage()    {}
func (*MultipleNodes) Descriptor() ([]byte, []int) {
	return fileDescriptor_541dae51990542ec, []int{2}
}

func (m *MultipleNodes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultipleNodes.Unmarshal(m, b)
}
func (m *MultipleNodes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultipleNodes.Marshal(b, m, deterministic)
}
func (m *MultipleNodes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultipleNodes.Merge(m, src)
}
func (m *MultipleNodes) XXX_Size() int {
	return xxx_messageInfo_MultipleNodes.Size(m)
}
func (m *MultipleNodes) XXX_DiscardUnknown() {
	xxx_messageInfo_MultipleNodes.DiscardUnknown(m)
}

var xxx_messageInfo_MultipleNodes proto.InternalMessageInfo

func (m *MultipleNodes) GetChordNode() *Node {
	if m != nil {
		return m.ChordNode
	}
	return nil
}

func (m *MultipleNodes) GetRaftNode() *Node {
	if m != nil {
		return m.RaftNode
	}
	return nil
}

type Key struct {
	Key                  int64    `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Key) Reset()         { *m = Key{} }
func (m *Key) String() string { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()    {}
func (*Key) Descriptor() ([]byte, []int) {
	return fileDescriptor_541dae51990542ec, []int{3}
}

func (m *Key) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Key.Unmarshal(m, b)
}
func (m *Key) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Key.Marshal(b, m, deterministic)
}
func (m *Key) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Key.Merge(m, src)
}
func (m *Key) XXX_Size() int {
	return xxx_messageInfo_Key.Size(m)
}
func (m *Key) XXX_DiscardUnknown() {
	xxx_messageInfo_Key.DiscardUnknown(m)
}

var xxx_messageInfo_Key proto.InternalMessageInfo

func (m *Key) GetKey() int64 {
	if m != nil {
		return m.Key
	}
	return 0
}

type Value struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Value) Reset()         { *m = Value{} }
func (m *Value) String() string { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()    {}
func (*Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_541dae51990542ec, []int{4}
}

func (m *Value) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Value.Unmarshal(m, b)
}
func (m *Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Value.Marshal(b, m, deterministic)
}
func (m *Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Value.Merge(m, src)
}
func (m *Value) XXX_Size() int {
	return xxx_messageInfo_Value.Size(m)
}
func (m *Value) XXX_DiscardUnknown() {
	xxx_messageInfo_Value.DiscardUnknown(m)
}

var xxx_messageInfo_Value proto.InternalMessageInfo

func (m *Value) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Data struct {
	Key                  int64    `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_541dae51990542ec, []int{5}
}

func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetKey() int64 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *Data) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Datas struct {
	Datas                []*Data  `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Datas) Reset()         { *m = Datas{} }
func (m *Datas) String() string { return proto.CompactTextString(m) }
func (*Datas) ProtoMessage()    {}
func (*Datas) Descriptor() ([]byte, []int) {
	return fileDescriptor_541dae51990542ec, []int{6}
}

func (m *Datas) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Datas.Unmarshal(m, b)
}
func (m *Datas) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Datas.Marshal(b, m, deterministic)
}
func (m *Datas) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Datas.Merge(m, src)
}
func (m *Datas) XXX_Size() int {
	return xxx_messageInfo_Datas.Size(m)
}
func (m *Datas) XXX_DiscardUnknown() {
	xxx_messageInfo_Datas.DiscardUnknown(m)
}

var xxx_messageInfo_Datas proto.InternalMessageInfo

func (m *Datas) GetDatas() []*Data {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Any struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Any) Reset()         { *m = Any{} }
func (m *Any) String() string { return proto.CompactTextString(m) }
func (*Any) ProtoMessage()    {}
func (*Any) Descriptor() ([]byte, []int) {
	return fileDescriptor_541dae51990542ec, []int{7}
}

func (m *Any) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Any.Unmarshal(m, b)
}
func (m *Any) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Any.Marshal(b, m, deterministic)
}
func (m *Any) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Any.Merge(m, src)
}
func (m *Any) XXX_Size() int {
	return xxx_messageInfo_Any.Size(m)
}
func (m *Any) XXX_DiscardUnknown() {
	xxx_messageInfo_Any.DiscardUnknown(m)
}

var xxx_messageInfo_Any proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ID)(nil), "protos.ID")
	proto.RegisterType((*Node)(nil), "protos.Node")
	proto.RegisterType((*MultipleNodes)(nil), "protos.MultipleNodes")
	proto.RegisterType((*Key)(nil), "protos.Key")
	proto.RegisterType((*Value)(nil), "protos.Value")
	proto.RegisterType((*Data)(nil), "protos.Data")
	proto.RegisterType((*Datas)(nil), "protos.Datas")
	proto.RegisterType((*Any)(nil), "protos.Any")
}

func init() { proto.RegisterFile("chord.proto", fileDescriptor_541dae51990542ec) }

var fileDescriptor_541dae51990542ec = []byte{
	// 443 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xe1, 0x6a, 0xdb, 0x30,
	0x14, 0x85, 0x89, 0x5d, 0xaf, 0xcd, 0xcd, 0xb2, 0x76, 0xa2, 0xdd, 0x4c, 0x60, 0x10, 0xc4, 0x36,
	0x42, 0x5b, 0xcc, 0xf0, 0xf6, 0x02, 0x21, 0x61, 0x21, 0xeb, 0x56, 0x8a, 0x0d, 0xfb, 0xaf, 0x45,
	0x37, 0x9d, 0x98, 0x67, 0x15, 0x4b, 0x29, 0xf8, 0xa9, 0xf7, 0x0a, 0x43, 0x72, 0x9c, 0x46, 0x76,
	0x49, 0xf2, 0xcb, 0xba, 0x3a, 0xdf, 0x91, 0x8e, 0xac, 0x6b, 0x43, 0x6f, 0xf1, 0x5b, 0x16, 0x3c,
	0x7a, 0x28, 0xa4, 0x96, 0xe4, 0x85, 0x7d, 0x28, 0x7a, 0x0e, 0xde, 0x7c, 0x4a, 0x5e, 0x81, 0x27,
	0x78, 0xd8, 0x19, 0x76, 0x46, 0x7e, 0xe2, 0x09, 0x4e, 0x3f, 0xc1, 0xd1, 0xad, 0xe4, 0xd8, 0x9c,
	0x27, 0x21, 0x1c, 0x33, 0xce, 0x0b, 0x54, 0x2a, 0xf4, 0x86, 0x9d, 0x51, 0x37, 0xa9, 0x4b, 0x8a,
	0xd0, 0xff, 0xb1, 0xca, 0xb4, 0x78, 0xc8, 0xd0, 0x38, 0x15, 0xb9, 0x84, 0xae, 0xdd, 0xcf, 0x54,
	0x76, 0x85, 0x5e, 0xfc, 0xb2, 0xda, 0x5b, 0x45, 0x66, 0x2e, 0x79, 0x92, 0xc9, 0x08, 0x4e, 0x0a,
	0xb6, 0xd4, 0x16, 0xf5, 0x9e, 0x41, 0x37, 0x2a, 0x7d, 0x0b, 0xfe, 0x0d, 0x96, 0xe4, 0x0c, 0xfc,
	0x3f, 0x58, 0xae, 0x83, 0x99, 0x21, 0x7d, 0x07, 0xc1, 0x4f, 0x96, 0xad, 0x90, 0x9c, 0x43, 0xf0,
	0x68, 0x06, 0x56, 0xec, 0x26, 0x55, 0x41, 0x23, 0x38, 0x9a, 0x32, 0xcd, 0xda, 0xc6, 0x27, 0xde,
	0xdb, 0xe6, 0xaf, 0x20, 0x30, 0xbc, 0x22, 0x14, 0x02, 0x6e, 0x06, 0x61, 0x67, 0xe8, 0x6f, 0xe7,
	0x32, 0x6a, 0x52, 0x49, 0x34, 0x00, 0x7f, 0x9c, 0x97, 0xf1, 0xbf, 0x00, 0x82, 0x89, 0x39, 0x13,
	0x79, 0x0f, 0xc7, 0xdf, 0xa4, 0xc8, 0x93, 0xbb, 0x09, 0x71, 0x0e, 0x32, 0xe8, 0xd5, 0xd5, 0x38,
	0x2f, 0xc9, 0x07, 0x38, 0xf9, 0x8e, 0xec, 0x11, 0xf7, 0x60, 0xd7, 0x70, 0xf6, 0x55, 0xe4, 0x3c,
	0x5d, 0x2d, 0x16, 0xa8, 0x94, 0x2c, 0x0c, 0x0e, 0x35, 0x30, 0x9f, 0x0e, 0x1c, 0x2b, 0x89, 0xe1,
	0xcd, 0x24, 0x93, 0x0a, 0xf5, 0x5d, 0x81, 0x0b, 0xe4, 0x22, 0xbf, 0xb7, 0x6f, 0x70, 0xa7, 0xe7,
	0x1a, 0x4e, 0x67, 0xa8, 0x9d, 0x0d, 0xb6, 0x13, 0x34, 0xe8, 0x08, 0x5e, 0xcf, 0xec, 0xf2, 0x1c,
	0x0f, 0xe5, 0xd3, 0x16, 0xbf, 0xf3, 0xbc, 0xa7, 0x69, 0x23, 0xcd, 0x0e, 0xfa, 0x23, 0x74, 0x6f,
	0xa5, 0x16, 0xcb, 0x72, 0x0f, 0x77, 0x05, 0xfd, 0x54, 0xcb, 0x82, 0xdd, 0xe3, 0x0c, 0xb5, 0x93,
	0xf8, 0x06, 0xcb, 0x41, 0xbf, 0x2e, 0xaa, 0x1e, 0xba, 0xdc, 0xc0, 0x69, 0x05, 0x3b, 0xd7, 0xee,
	0x2e, 0x1c, 0xc3, 0xc5, 0x9a, 0x9d, 0xff, 0x45, 0x2e, 0x98, 0x3e, 0xc0, 0xf3, 0x05, 0xc2, 0x86,
	0x67, 0x8a, 0x19, 0x6a, 0x6c, 0xe5, 0x6a, 0x36, 0xc2, 0xda, 0x75, 0x08, 0x1d, 0x6d, 0xe8, 0x19,
	0xea, 0x71, 0x96, 0xb5, 0x6e, 0xa9, 0xbf, 0x9d, 0x4f, 0x91, 0x18, 0x7a, 0xb6, 0x67, 0xd9, 0xd2,
	0xa6, 0xbf, 0xa8, 0x55, 0xe7, 0xab, 0x76, 0xaf, 0xf6, 0x57, 0xf5, 0x13, 0xf9, 0xfc, 0x3f, 0x00,
	0x00, 0xff, 0xff, 0x42, 0x6f, 0xcd, 0xb0, 0x5a, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChordClient is the client API for Chord service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChordClient interface {
	JoinRPC(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Any, error)
	LeaveRPC(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Any, error)
	FindSuccessorRPC(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Node, error)
	ClosetPrecedingNodeRPC(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Node, error)
	GetSuccessorRPC(ctx context.Context, in *Any, opts ...grpc.CallOption) (*Node, error)
	GetPredecessorRPC(ctx context.Context, in *Any, opts ...grpc.CallOption) (*Node, error)
	SetPredecessorRPC(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Any, error)
	SetSuccessorRPC(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Any, error)
	NotifyRPC(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Any, error)
	StorageGetRPC(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Value, error)
	StorageSetRPC(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Any, error)
	StorageImediateSetRPC(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Any, error)
	StorageImediateDeleteRPC(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Any, error)
	StorageDeleteRPC(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Any, error)
	StorageGetAllRPC(ctx context.Context, in *Any, opts ...grpc.CallOption) (*Datas, error)
	JoinRaftRPC(ctx context.Context, in *MultipleNodes, opts ...grpc.CallOption) (*Node, error)
}

type chordClient struct {
	cc *grpc.ClientConn
}

func NewChordClient(cc *grpc.ClientConn) ChordClient {
	return &chordClient{cc}
}

func (c *chordClient) JoinRPC(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Any, error) {
	out := new(Any)
	err := c.cc.Invoke(ctx, "/protos.Chord/JoinRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) LeaveRPC(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Any, error) {
	out := new(Any)
	err := c.cc.Invoke(ctx, "/protos.Chord/LeaveRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) FindSuccessorRPC(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/protos.Chord/FindSuccessorRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) ClosetPrecedingNodeRPC(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/protos.Chord/ClosetPrecedingNodeRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) GetSuccessorRPC(ctx context.Context, in *Any, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/protos.Chord/GetSuccessorRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) GetPredecessorRPC(ctx context.Context, in *Any, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/protos.Chord/GetPredecessorRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) SetPredecessorRPC(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Any, error) {
	out := new(Any)
	err := c.cc.Invoke(ctx, "/protos.Chord/SetPredecessorRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) SetSuccessorRPC(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Any, error) {
	out := new(Any)
	err := c.cc.Invoke(ctx, "/protos.Chord/SetSuccessorRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) NotifyRPC(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Any, error) {
	out := new(Any)
	err := c.cc.Invoke(ctx, "/protos.Chord/NotifyRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) StorageGetRPC(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, "/protos.Chord/StorageGetRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) StorageSetRPC(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Any, error) {
	out := new(Any)
	err := c.cc.Invoke(ctx, "/protos.Chord/StorageSetRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) StorageImediateSetRPC(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Any, error) {
	out := new(Any)
	err := c.cc.Invoke(ctx, "/protos.Chord/StorageImediateSetRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) StorageImediateDeleteRPC(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Any, error) {
	out := new(Any)
	err := c.cc.Invoke(ctx, "/protos.Chord/StorageImediateDeleteRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) StorageDeleteRPC(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Any, error) {
	out := new(Any)
	err := c.cc.Invoke(ctx, "/protos.Chord/StorageDeleteRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) StorageGetAllRPC(ctx context.Context, in *Any, opts ...grpc.CallOption) (*Datas, error) {
	out := new(Datas)
	err := c.cc.Invoke(ctx, "/protos.Chord/StorageGetAllRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) JoinRaftRPC(ctx context.Context, in *MultipleNodes, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/protos.Chord/JoinRaftRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChordServer is the server API for Chord service.
type ChordServer interface {
	JoinRPC(context.Context, *Node) (*Any, error)
	LeaveRPC(context.Context, *Node) (*Any, error)
	FindSuccessorRPC(context.Context, *ID) (*Node, error)
	ClosetPrecedingNodeRPC(context.Context, *ID) (*Node, error)
	GetSuccessorRPC(context.Context, *Any) (*Node, error)
	GetPredecessorRPC(context.Context, *Any) (*Node, error)
	SetPredecessorRPC(context.Context, *Node) (*Any, error)
	SetSuccessorRPC(context.Context, *Node) (*Any, error)
	NotifyRPC(context.Context, *Node) (*Any, error)
	StorageGetRPC(context.Context, *Key) (*Value, error)
	StorageSetRPC(context.Context, *Data) (*Any, error)
	StorageImediateSetRPC(context.Context, *Data) (*Any, error)
	StorageImediateDeleteRPC(context.Context, *Key) (*Any, error)
	StorageDeleteRPC(context.Context, *Key) (*Any, error)
	StorageGetAllRPC(context.Context, *Any) (*Datas, error)
	JoinRaftRPC(context.Context, *MultipleNodes) (*Node, error)
}

// UnimplementedChordServer can be embedded to have forward compatible implementations.
type UnimplementedChordServer struct {
}

func (*UnimplementedChordServer) JoinRPC(ctx context.Context, req *Node) (*Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRPC not implemented")
}
func (*UnimplementedChordServer) LeaveRPC(ctx context.Context, req *Node) (*Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveRPC not implemented")
}
func (*UnimplementedChordServer) FindSuccessorRPC(ctx context.Context, req *ID) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSuccessorRPC not implemented")
}
func (*UnimplementedChordServer) ClosetPrecedingNodeRPC(ctx context.Context, req *ID) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClosetPrecedingNodeRPC not implemented")
}
func (*UnimplementedChordServer) GetSuccessorRPC(ctx context.Context, req *Any) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuccessorRPC not implemented")
}
func (*UnimplementedChordServer) GetPredecessorRPC(ctx context.Context, req *Any) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPredecessorRPC not implemented")
}
func (*UnimplementedChordServer) SetPredecessorRPC(ctx context.Context, req *Node) (*Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPredecessorRPC not implemented")
}
func (*UnimplementedChordServer) SetSuccessorRPC(ctx context.Context, req *Node) (*Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSuccessorRPC not implemented")
}
func (*UnimplementedChordServer) NotifyRPC(ctx context.Context, req *Node) (*Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyRPC not implemented")
}
func (*UnimplementedChordServer) StorageGetRPC(ctx context.Context, req *Key) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorageGetRPC not implemented")
}
func (*UnimplementedChordServer) StorageSetRPC(ctx context.Context, req *Data) (*Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorageSetRPC not implemented")
}
func (*UnimplementedChordServer) StorageImediateSetRPC(ctx context.Context, req *Data) (*Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorageImediateSetRPC not implemented")
}
func (*UnimplementedChordServer) StorageImediateDeleteRPC(ctx context.Context, req *Key) (*Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorageImediateDeleteRPC not implemented")
}
func (*UnimplementedChordServer) StorageDeleteRPC(ctx context.Context, req *Key) (*Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorageDeleteRPC not implemented")
}
func (*UnimplementedChordServer) StorageGetAllRPC(ctx context.Context, req *Any) (*Datas, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorageGetAllRPC not implemented")
}
func (*UnimplementedChordServer) JoinRaftRPC(ctx context.Context, req *MultipleNodes) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRaftRPC not implemented")
}

func RegisterChordServer(s *grpc.Server, srv ChordServer) {
	s.RegisterService(&_Chord_serviceDesc, srv)
}

func _Chord_JoinRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).JoinRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Chord/JoinRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).JoinRPC(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_LeaveRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).LeaveRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Chord/LeaveRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).LeaveRPC(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_FindSuccessorRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).FindSuccessorRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Chord/FindSuccessorRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).FindSuccessorRPC(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_ClosetPrecedingNodeRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).ClosetPrecedingNodeRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Chord/ClosetPrecedingNodeRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).ClosetPrecedingNodeRPC(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_GetSuccessorRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Any)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).GetSuccessorRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Chord/GetSuccessorRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).GetSuccessorRPC(ctx, req.(*Any))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_GetPredecessorRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Any)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).GetPredecessorRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Chord/GetPredecessorRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).GetPredecessorRPC(ctx, req.(*Any))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_SetPredecessorRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).SetPredecessorRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Chord/SetPredecessorRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).SetPredecessorRPC(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_SetSuccessorRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).SetSuccessorRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Chord/SetSuccessorRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).SetSuccessorRPC(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_NotifyRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).NotifyRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Chord/NotifyRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).NotifyRPC(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_StorageGetRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).StorageGetRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Chord/StorageGetRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).StorageGetRPC(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_StorageSetRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).StorageSetRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Chord/StorageSetRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).StorageSetRPC(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_StorageImediateSetRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).StorageImediateSetRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Chord/StorageImediateSetRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).StorageImediateSetRPC(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_StorageImediateDeleteRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).StorageImediateDeleteRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Chord/StorageImediateDeleteRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).StorageImediateDeleteRPC(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_StorageDeleteRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).StorageDeleteRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Chord/StorageDeleteRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).StorageDeleteRPC(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_StorageGetAllRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Any)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).StorageGetAllRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Chord/StorageGetAllRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).StorageGetAllRPC(ctx, req.(*Any))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_JoinRaftRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultipleNodes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).JoinRaftRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Chord/JoinRaftRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).JoinRaftRPC(ctx, req.(*MultipleNodes))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chord_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Chord",
	HandlerType: (*ChordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinRPC",
			Handler:    _Chord_JoinRPC_Handler,
		},
		{
			MethodName: "LeaveRPC",
			Handler:    _Chord_LeaveRPC_Handler,
		},
		{
			MethodName: "FindSuccessorRPC",
			Handler:    _Chord_FindSuccessorRPC_Handler,
		},
		{
			MethodName: "ClosetPrecedingNodeRPC",
			Handler:    _Chord_ClosetPrecedingNodeRPC_Handler,
		},
		{
			MethodName: "GetSuccessorRPC",
			Handler:    _Chord_GetSuccessorRPC_Handler,
		},
		{
			MethodName: "GetPredecessorRPC",
			Handler:    _Chord_GetPredecessorRPC_Handler,
		},
		{
			MethodName: "SetPredecessorRPC",
			Handler:    _Chord_SetPredecessorRPC_Handler,
		},
		{
			MethodName: "SetSuccessorRPC",
			Handler:    _Chord_SetSuccessorRPC_Handler,
		},
		{
			MethodName: "NotifyRPC",
			Handler:    _Chord_NotifyRPC_Handler,
		},
		{
			MethodName: "StorageGetRPC",
			Handler:    _Chord_StorageGetRPC_Handler,
		},
		{
			MethodName: "StorageSetRPC",
			Handler:    _Chord_StorageSetRPC_Handler,
		},
		{
			MethodName: "StorageImediateSetRPC",
			Handler:    _Chord_StorageImediateSetRPC_Handler,
		},
		{
			MethodName: "StorageImediateDeleteRPC",
			Handler:    _Chord_StorageImediateDeleteRPC_Handler,
		},
		{
			MethodName: "StorageDeleteRPC",
			Handler:    _Chord_StorageDeleteRPC_Handler,
		},
		{
			MethodName: "StorageGetAllRPC",
			Handler:    _Chord_StorageGetAllRPC_Handler,
		},
		{
			MethodName: "JoinRaftRPC",
			Handler:    _Chord_JoinRaftRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chord.proto",
}
